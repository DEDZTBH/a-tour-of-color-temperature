{"version":3,"sources":["lib/colorTempToRGB.js","App.js","serviceWorker.js","index.js"],"names":["clamp","x","min","max","text1850","split","text2400","text2700","text3000","text4100","text5000","text6500","text_decrease","text1500","App","useState","targetTemp","setTargetTemp","temp","setTemp","page","setPage","delay","setDelay","disc","setDisc","discBuffer","setDiscBuffer","change","setChange","slider","setSlider","callback","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","rgb","kelvin","red","green","blue","Math","log","pow","r","g","b","colorTemperatureToRGB","disc_bred","map","d","className","style","background","display","type","value","onChange","event","parseInt","target","disabled","onClick","opacity","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.26e2dcc9.chunk.js","sourcesContent":["// From http://www.tannerhelland.com/4435/convert-temperature-rgb-algorithm-code/\n\n// Start with a temperature, in Kelvin, somewhere between 1000 and 40000.  (Other values may work,\n//  but I can't make any promises about the quality of the algorithm's estimates above 40000 K.)\n\n\nexport const colorTemperatureToRGB = (kelvin) => {\n\n    var temp = kelvin / 100;\n\n    var red, green, blue;\n\n    if (temp <= 66) {\n\n        red = 255;\n\n        green = temp;\n        green = 99.4708025861 * Math.log(green) - 161.1195681661;\n\n\n        if (temp <= 19) {\n\n            blue = 0;\n\n        } else {\n\n            blue = temp - 10;\n            blue = 138.5177312231 * Math.log(blue) - 305.0447927307;\n\n        }\n\n    } else {\n\n        red = temp - 60;\n        red = 329.698727446 * Math.pow(red, -0.1332047592);\n\n        green = temp - 60;\n        green = 288.1221695283 * Math.pow(green, -0.0755148492);\n\n        blue = 255;\n\n    }\n\n\n    return {\n        r: clamp(red, 0, 255),\n        g: clamp(green, 0, 255),\n        b: clamp(blue, 0, 255)\n    }\n\n}\n\n\nfunction clamp(x, min, max) {\n\n    if (x < min) {\n        return min;\n    }\n    if (x > max) {\n        return max;\n    }\n\n    return x;\n\n}\n","import React, {useEffect, useState, useRef} from 'react';\nimport {colorTemperatureToRGB} from './lib/colorTempToRGB';\nimport './App.css';\n\n//From https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nfunction useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n\nconst text1850 =\n    `Welcome to a tour of color temperature!\n    Wait, what is color temperature? \n    Color temperature is the temperature at which a black body radiates light of this color.\n    I know you are not here for a physics lesson. So lets get started.\n    Please turn up your screen brightness for best experience.\n    What you see now is the color temperature of candle light.\n    `.split('\\n');\nconst text2400 =\n    `Now incandescent light we used back in the old days.\n     You should feel comfortable and relaxed looking at low color temperatures (aka. warmer colors), especially at night.\n    `.split('\\n');\nconst text2700 =\n    `High pressure sodium streetlight.\n    We mainly used them before LED streetlights.\n    `.split('\\n');\nconst text3000 =\n    `Maximum color temperature for streetlights according to AMA's recommendation.\n    Wait, but why?\n    When we go to higher color temperatures, there is more blue light.\n    And blue light has many adverse effects at night.\n    Especially to our health and to the ecosystem. \n    You will see why soon.\n    `.split('\\n');\nconst text4100 =\n    `Moonlight.\n    This is how far nature goes in terms of color temperature at night.\n    Many species used the moon and the stars to navigate at night for millions, or perhaps billions of years.\n    And then, artificial lights intrude into nature.\n    `.split('\\n');\nconst text5000 =\n    `Sunlight. \n    You should not see sunlight at night. Neither should the ecosystem.\n    Yet, this is not where we stopped.\n    `.split('\\n');\nconst text6500 =\n    `LED streetlight.\n    I know you feel very uncomfortable right now. Lets continue! \n    `.split('\\n');\nconst text_decrease =\n    `Excessive blue light at night makes us feel uncomfortable and stressed, as you just see.\n     It disrupts our sleep cycle and leads to many long-term health problems.\n     It causes glare that reduces our ability to see at night, imposing safety risks.\n     It hinders animals' ability to navigate which can lead to major decrease in population.\n     It scatters in the atmosphere and cause Skyglow, blocking light from the stars.\n     And the list goes on...\n    `.split('\\n')\nconst text1500 =\n    `I hope you enjoyed this tour (except the 6500K part)\n    And thank you to being conscious about light pollution.\n    Choose light that are not too bright, shields, and warm at night! \n    `.split('\\n');\n\nfunction App() {\n    const [targetTemp, setTargetTemp] = useState(1850);\n    const [temp, setTemp] = useState(1850);\n    const [page, setPage] = useState(0);\n    const [delay, setDelay] = useState(3e8);\n    const [disc, setDisc] = useState(text1850);\n    const [discBuffer, setDiscBuffer] = useState('');\n    const [change, setChange] = useState(false);\n    const [slider, setSlider] = useState(false);\n\n    useInterval(() => {\n        if (!slider) {\n            if (temp < targetTemp) {\n                setTemp(temp + 2);\n            } else if (temp > targetTemp) {\n                setTemp(temp - 2);\n            } else {\n                if (change) {\n                    setChange(false);\n                    setDelay(3e8);\n                    setDisc(discBuffer);\n                    switch (temp) {\n                        case 1500:\n                            setSlider(true);\n                            break;\n                        default:\n                    }\n                }\n            }\n        }\n    }, delay)\n\n\n    function buttonClicked() {\n        if (!change) {\n            switch (page) {\n                case 0:\n                    setTargetTemp(2400);\n                    setDisc([]);\n                    setDiscBuffer(text2400);\n                    setChange(true);\n                    setDelay(15);\n                    break;\n                case 1:\n                    setTargetTemp(2700);\n                    setDisc([]);\n                    setDiscBuffer(text2700);\n                    setChange(true);\n                    setDelay(15);\n                    break;\n                case 2:\n                    setTargetTemp(3000);\n                    setDisc([]);\n                    setDiscBuffer(text3000);\n                    setChange(true);\n                    setDelay(15);\n                    break;\n                case 3:\n                    setTargetTemp(4100);\n                    setDisc([]);\n                    setDiscBuffer(text4100);\n                    setChange(true);\n                    setDelay(10);\n                    break;\n                case 4:\n                    setTargetTemp(5000);\n                    setDisc([]);\n                    setDiscBuffer(text5000);\n                    setChange(true);\n                    setDelay(15);\n                    break;\n                case 5:\n                    setTargetTemp(6500);\n                    setDisc([]);\n                    setDiscBuffer(text6500);\n                    setChange(true);\n                    setDelay(5);\n                    break;\n                case 6:\n                    setTargetTemp(1500);\n                    setDisc(text_decrease);\n                    setDiscBuffer(text1500);\n                    setChange(true);\n                    setDelay(10);\n                    break;\n                default:\n            }\n            setPage(page + 1);\n        }\n    }\n\n    let rgb = colorTemperatureToRGB(temp);\n\n    let disc_bred = disc.map((d) => {\n        return (\n            <span>\n                {d} <br />\n            </span>\n        );\n    })\n\n    return (\n        <div className=\"App\">\n            <div className=\"App-header\" style={{background : `rgb(${rgb.r},${rgb.g},${rgb.b})` }}>\n                <span className=\"k-meter\">{temp}K</span>\n                <div className=\"control\">\n                    <div className=\"disc\">\n                        <span>{disc_bred}</span>\n                    </div>\n                    <div className=\"slideContainer\" style={slider ? {} : {display: 'none'}}>\n                        <input type=\"range\" min=\"1000\" max=\"6500\" className=\"slider\"\n                               id=\"myRange\" value={temp} onChange={(event) => {setTemp(parseInt(event.target.value))}}\n                               disabled={!slider} />\n                    </div>\n                    <button onClick={buttonClicked} disabled={slider} style={(slider || change) ? {opacity: 0} : {}}>Continue</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}